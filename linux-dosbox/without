; x86 assembly - intel syntax
xseg	segment	public 'code'
	assume	cs:xseg, ds:xseg, ss:xseg
	org	100h
main	proc	near
	call	near ptr _bar_1
	mov	ax,4C00h
	int	21h
main	endp
@str1 db ", "
	db 0
@1:
_bar_1	proc near
	push bp
	mov bp, sp
	sub sp, 52
@2:
	mov ax, 65
	mov word ptr [bp - 2], ax
@3:
	mov ax, 0
	mov word ptr [bp - 4], ax
@4:
	mov ax, word ptr [bp - 4]
	mov dx, 15
	cmp ax, dx
	jle @6
@5:
	jmp @8
@6:
	mov al, 1
	mov byte ptr [bp - 37], al
@7:
	jmp @9
@8:
	mov al, 0
	mov byte ptr [bp - 37], al
@9:
	mov al, byte ptr [bp - 37]
	or al, al
	jnz @11
@10:
	jmp @39
@11:
	mov ax, word ptr [bp - 2]
	mov cx, 137
	imul cx
	mov word ptr [bp - 41], ax
@12:
	mov ax, word ptr [bp - 41]
	mov dx, 221
	add ax, dx
	mov word ptr [bp - 43], ax
@13:
	mov ax, word ptr [bp - 43]
	mov dx, word ptr [bp - 4]
	add ax, dx
	mov word ptr [bp - 45], ax
@14:
	mov ax, word ptr [bp - 45]
	cwd
	mov cx, 101
	idiv cx
	mov word ptr [bp - 47], dx
@15:
	mov ax, word ptr [bp - 47]
	mov word ptr [bp - 2], ax
@16:
	mov ax, word ptr [bp - 4]
	mov cx, 2
	imul cx
	mov word ptr [bp - 51], ax
@17:
	mov ax, word ptr [bp - 51]
	mov cx, word
	imul cx
	mov cx, word ptr [bp - 36]
	add ax, cx
	mov word ptr [bp - 49], ax
@18:
	mov ax, word ptr [bp - 2]
	mov di, word ptr [bp - 49]
	mov word ptr [di], ax
@19:
	mov ax, word ptr [bp - 4]
	mov dx, 0
	cmp ax, dx
	jg @21
@20:
	jmp @23
@21:
	mov al, 1
	mov byte ptr [bp - 52], al
@22:
	jmp @24
@23:
	mov al, 0
	mov byte ptr [bp - 52], al
@24:
	mov al, byte ptr [bp - 52]
	or al, al
	jnz @26
@25:
	jmp @28
@26:
	lea si, byte ptr @str1
	push si
@27:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeString
	add sp, 6
@28:
	mov ax, word ptr [bp - 4]
	push ax
@29:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeInteger
	add sp, 6
@30:
	mov al, 32
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@31:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@32:
	mov ax, word ptr [bp - 2]
	push ax
@33:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeInteger
	add sp, 6
@34:
	mov al, 32
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@35:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@36:
	mov ax, word ptr [bp - 4]
	mov dx, 1
	add ax, dx
	mov word ptr [bp - 39], ax
@37:
	mov ax, word ptr [bp - 39]
	mov word ptr [bp - 4], ax
@38:
	jmp @4
@39:
	mov al, 10
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@40:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@41:
	jmp @bar_1
@42:
@bar_1:
	mov sp, bp
	pop bp
	ret
_bar_1	endp


 extrn __new : proc
 extrn __dispose : proc
 extrn _formatInteger : proc
 extrn _formatReal : proc
 extrn _parseInteger : proc
 extrn _parseReal : proc
 
 extrn _abs : proc
 extrn _arctan : proc
 extrn _cos : proc
 extrn _exp : proc
 extrn _fabs : proc
 extrn _ln : proc
 extrn _pi : proc
 extrn _sin : proc
 extrn _sqrt : proc
 extrn _tan : proc
 
 extrn _writeBoolean : proc
 extrn _writeChar : proc
 extrn _writeInteger : proc
 extrn _writeReal : proc
 extrn _writeString : proc
 extrn _readBoolean : proc
 extrn _readChar : proc
 extrn _readInteger : proc
 extrn _readReal : proc
 extrn _readString : proc
 
 extrn _chr : proc
 extrn _exit : proc
 extrn _ord : proc
 extrn _round : proc
 extrn _trunc : proc
 
xseg	ends
	end	main
