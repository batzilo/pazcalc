xseg    segment public 'code'
    assume  cs:xseg, ds:xseg, ss:xseg
    org 100h
main    proc    near
    call    near ptr _bar_3
    mov ax,4C00h
    int 21h
main    endp
@1:
_baz_1  proc near
    push bp
    mov bp, sp
    sub sp, 0
@2:
    jmp @baz_1
@3:
@baz_1: mov sp, bp
    pop bp
    ret
_baz_1  endp
@4:
_foo_2  proc near
    push bp
    mov bp, sp
    sub sp, 0
@5:
    mov ax, 6
    mov word ptr [bp + 6], ax
@6:
    jmp @foo_2
@7:
@foo_2: mov sp, bp
    pop bp
    ret
_foo_2  endp
@8:
_bar_3  proc near
    push bp
    mov bp, sp
    sub sp, 12
@9:
    mov si, word ptr [bp + 4]
    lea si, word ptr [bp - 8]
    push si
@10:
    push word ptr [bp + 4]
    call near ptr _foo_2
    add sp, 4
@11:
    mov si, word ptr [bp + 4]
    mov ax, word ptr [bp - 8]
    mov si, word ptr [bp + 4]
    mov word ptr [si - 2], ax
@12:
    mov si, word ptr [bp + 4]
    mov ax, word ptr [si - 2]
    mov dx, 1
    add ax, dx
    mov si, word ptr [bp + 4]
    mov word ptr [si - 10], ax
@13:
    mov si, word ptr [bp + 4]
    mov ax, word ptr [bp - 10]
    mov si, word ptr [bp + 4]
    mov word ptr [si - 4], ax
@14:
    mov si, word ptr [bp + 4]
    mov ax, word ptr [si - 2]
    mov si, word ptr [bp + 4]
    mov cx, word ptr [si - 4]
    imul cx
    mov si, word ptr [bp + 4]
    mov word ptr [si - 12], ax
@15:
    mov si, word ptr [bp + 4]
    mov ax, word ptr [bp - 12]
    mov si, word ptr [bp + 4]
    mov word ptr [si - 6], ax
@16:
    mov si, word ptr [bp + 4]
    mov ax, word ptr [si - 6]
    push ax
@17:
    sub sp, 2
    push word ptr [bp + 4]
    call near ptr _writeInteger
    add sp, 3
@18:
    jmp @bar_3
@19:
@bar_3: mov sp, bp
    pop bp
    ret
_bar_3  endp

extrn _writeInteger : proc
xseg    ends
    end main

