; x86 assembly - intel syntax
xseg	segment	public 'code'
	assume	cs:xseg, ds:xseg, ss:xseg
	org	100h
main	proc	near
	call	near ptr _bar_2
	mov	ax,4C00h
	int	21h
main	endp
@str1 db ", "
	db 0
@str2 db ", "
	db 0
@1:
_print_1	proc near
	push bp
	mov bp, sp
	sub sp, 12
@2:
	mov si, word ptr [bp + 12]
	push si
@3:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeString
	add sp, 6
@4:
	mov ax, word ptr [bp + 10]
	mov dx, 1
	sub ax, dx
	mov word ptr [bp - 4], ax
@5:
	mov ax, 0
	mov word ptr [bp - 2], ax
@6:
	mov ax, word ptr [bp - 2]
	mov dx, word ptr [bp - 4]
	cmp ax, dx
	jle @8
@7:
	jmp @10
@8:
	mov al, 1
	mov byte ptr [bp - 5], al
@9:
	jmp @11
@10:
	mov al, 0
	mov byte ptr [bp - 5], al
@11:
	mov al, byte ptr [bp - 5]
	or al, al
	jnz @13
@12:
	jmp @29
@13:
	mov ax, word ptr [bp - 2]
	mov dx, 0
	cmp ax, dx
	jg @15
@14:
	jmp @17
@15:
	mov al, 1
	mov byte ptr [bp - 8], al
@16:
	jmp @18
@17:
	mov al, 0
	mov byte ptr [bp - 8], al
@18:
	mov al, byte ptr [bp - 8]
	or al, al
	jnz @20
@19:
	jmp @22
@20:
	lea si, byte ptr @str1
	push si
@21:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeString
	add sp, 6
@22:
	mov ax, word ptr [bp - 2]
	mov cx, 2
	imul cx
	mov word ptr [bp - 12], ax
@23:
	mov ax, word ptr [bp - 12]
	mov cx, word
	imul cx
	mov cx, word ptr [bp + 8]
	add ax, cx
	mov word ptr [bp - 10], ax
@24:
	mov di, word ptr [bp - 10]
	mov ax, word ptr [di]
	push ax
@25:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeInteger
	add sp, 6
@26:
	mov ax, word ptr [bp - 2]
	mov dx, 1
	add ax, dx
	mov word ptr [bp - 7], ax
@27:
	mov ax, word ptr [bp - 7]
	mov word ptr [bp - 2], ax
@28:
	jmp @6
@29:
	mov al, 10
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@30:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@31:
	jmp @print_1
@32:
@print_1:
	mov sp, bp
	pop bp
	ret
_print_1	endp
@33:
_bar_2	proc near
	push bp
	mov bp, sp
	sub sp, 52
@34:
	mov ax, 65
	mov word ptr [bp - 2], ax
@35:
	mov ax, 0
	mov word ptr [bp - 4], ax
@36:
	mov ax, word ptr [bp - 4]
	mov dx, 15
	cmp ax, dx
	jle @38
@37:
	jmp @40
@38:
	mov al, 1
	mov byte ptr [bp - 37], al
@39:
	jmp @41
@40:
	mov al, 0
	mov byte ptr [bp - 37], al
@41:
	mov al, byte ptr [bp - 37]
	or al, al
	jnz @43
@42:
	jmp @71
@43:
	mov ax, word ptr [bp - 2]
	mov cx, 137
	imul cx
	mov word ptr [bp - 41], ax
@44:
	mov ax, word ptr [bp - 41]
	mov dx, 221
	add ax, dx
	mov word ptr [bp - 43], ax
@45:
	mov ax, word ptr [bp - 43]
	mov dx, word ptr [bp - 4]
	add ax, dx
	mov word ptr [bp - 45], ax
@46:
	mov ax, word ptr [bp - 45]
	cwd
	mov cx, 101
	idiv cx
	mov word ptr [bp - 47], dx
@47:
	mov ax, word ptr [bp - 47]
	mov word ptr [bp - 2], ax
@48:
	mov ax, word ptr [bp - 4]
	mov cx, 2
	imul cx
	mov word ptr [bp - 51], ax
@49:
	mov ax, word ptr [bp - 51]
	mov cx, word
	imul cx
	mov cx, word ptr [bp - 36]
	add ax, cx
	mov word ptr [bp - 49], ax
@50:
	mov ax, word ptr [bp - 2]
	mov di, word ptr [bp - 49]
	mov word ptr [di], ax
@51:
	mov ax, word ptr [bp - 4]
	mov dx, 0
	cmp ax, dx
	jg @53
@52:
	jmp @55
@53:
	mov al, 1
	mov byte ptr [bp - 52], al
@54:
	jmp @56
@55:
	mov al, 0
	mov byte ptr [bp - 52], al
@56:
	mov al, byte ptr [bp - 52]
	or al, al
	jnz @58
@57:
	jmp @60
@58:
	lea si, byte ptr @str2
	push si
@59:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeString
	add sp, 6
@60:
	mov ax, word ptr [bp - 4]
	push ax
@61:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeInteger
	add sp, 6
@62:
	mov al, 32
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@63:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@64:
	mov ax, word ptr [bp - 2]
	push ax
@65:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeInteger
	add sp, 6
@66:
	mov al, 32
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@67:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@68:
	mov ax, word ptr [bp - 4]
	mov dx, 1
	add ax, dx
	mov word ptr [bp - 39], ax
@69:
	mov ax, word ptr [bp - 39]
	mov word ptr [bp - 4], ax
@70:
	jmp @36
@71:
	mov al, 10
	sub sp, 1
	mov si, sp
	mov byte ptr [si], al
@72:
	sub sp, 2
	push word ptr [bp + 4]
	call near ptr _writeChar
	add sp, 5
@73:
	jmp @bar_2
@74:
@bar_2:
	mov sp, bp
	pop bp
	ret
_bar_2	endp


 extrn __new : proc
 extrn __dispose : proc
 extrn _formatInteger : proc
 extrn _formatReal : proc
 extrn _parseInteger : proc
 extrn _parseReal : proc
 
 extrn _abs : proc
 extrn _arctan : proc
 extrn _cos : proc
 extrn _exp : proc
 extrn _fabs : proc
 extrn _ln : proc
 extrn _pi : proc
 extrn _sin : proc
 extrn _sqrt : proc
 extrn _tan : proc
 
 extrn _writeBoolean : proc
 extrn _writeChar : proc
 extrn _writeInteger : proc
 extrn _writeReal : proc
 extrn _writeString : proc
 extrn _readBoolean : proc
 extrn _readChar : proc
 extrn _readInteger : proc
 extrn _readReal : proc
 extrn _readString : proc
 
 extrn _chr : proc
 extrn _exit : proc
 extrn _ord : proc
 extrn _round : proc
 extrn _trunc : proc
 
xseg	ends
	end	main
