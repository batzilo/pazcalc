pazcal conditions
-----------------

int c;
bool a;
//code for a
if ( a ) {
    c = 6;
    c *= 7;
}
else {
    c = 17;
    c += 25;
}
int b = 1;

.
.
.
41: :=, $1, --, a

42: ifb, a, --, 44
43: jump, --, --, 48

44: :=, 6, --, c
45: *, c, 7, $2
46: :=, $2, --, c
47: jump, --, --, *

48: :=, 17, --, c
49: +, c, 25, $3
50: :=, $3, --, c

51: :=, 1, --, b
.
.
.

cond.true = 44
cond.false = 48
stmt.next = 47

<cond> ::= <expr> {
    <cond>.true = [42];
    addQuad : ifb, <expr>.place, --, *;
    <cond>.false = [43];
    addQuad : jump, --, --, *;
}

<stmt> ::= if <cond> {
    backpatch(<cond>.true, 44); // 42: * -> 44
    L1 = <cond>.false; // [43]
    L2 = [];
} then <stmt1> else {
    L1 = [47];
    addQuad : jump, --, --, *;
    backpatch(<cond>.false, 48); // 43: * -> 48
} <stmt2> {
    L2 = <stmt2>.next; // []
    <stmt>.next = merge(L1, <stmt1>.next, L2) // [47]
}


-------------------

int c;
int a;
//code for a
if ( a > 0 ) {
    c = 6;
    c *= 7;
}
else {
    c = 17;
    c += 25;
}
int b = 1;

.
.
.
41: :=, $1, --, a

42: >, a, 0, 44
43: jump, --, --, 48

44: :=, 6, --, c
45: *, c, 7, $2
46: :=, $2, --, c
47: jump, --, --, *

48: :=, 17, --, c
49: +, c, 25, $3
50: :=, $3, --, c

51: :=, 1, --, b
.
.
.

cond.true = 44
cond.false = 48
stmt.next = 47

<cond> ::= <expr1> <relop> <expr2> {
    <cond>.true = [42];
    addQuad : <relop>.name, <expr1>.place, <expr2>.place, *;
    <cond>.false = [43];
    addQuad : jump, --, --, *;
}

<stmt> ::= if <cond> {
    backpatch(<cond>.true, 44); // 42: * -> 44
    L1 = <cond>.false; // [43]
    L2 = [];
} then <stmt1> else {
    L1 = [47];
    addQuad : jump, --, --, *;
    backpatch(<cond>.false, 48); // 43: * -> 48
} <stmt2> {
    L2 = <stmt2>.next; // []
    <stmt>.next = merge(L1, <stmt1>.next, L2) // [47]
}



-------------------

int c;
bool a;
// code for c
a = c > 0;
if ( a ) {
    c = 6;
    c *= 7;
}
else {
    c = 17;
    c += 25;
}
int b = 1;

.
.
.
41: :=, $1, --, c

42: >, c, 0, 44
43: jump, --, --, 46

44: :=, true, --, $2
45: jump, --, --, 47
46: :=, false, --, $2

47: ifb, $2, --, 49
48: jump, --, --, 53

49: :=, 6, --, c
50: *, c, 7, $3
51: :=, $3, --, c

52: jump, --, --, *

53: :=, 17, --, c
54: +, c, 25, $4
55: :=, $4, --, c

56: :=, 1, --, b
.
.
.


cond.true = 42
cond.false = 46

cond.true = 47
cond.false = 48


<cond> ::= <expr1> <relop> <expr2> {
    <cond>.true = [42];
    addQuad : <relop>.name, <expr1>.place, <expr2>.place, *;
    <cond>.false = [43];
    addQuad : jump, --, --, *;
}

<expr> ::= <cond> {
    W = mktemp( bool ); // $2
    backpatch(<cond>.true, 44); // 42: * -> 44
    addQuad : :=, true, --, W;
    Q = 47; // 45 + 2
    addQuad : jump, --, --, Q;
    backpatch(<cond>.false, 46); //43: * -> 46
    addQuad : :=, false, --, W;
    <expr>.place = W;
}

<cond> ::= <expr> {
    <cond>.true = [47];
    addQuad : ifb, <expr>.place, --, *;
    <cond>.false = [48];
    addQuad : jump, --, --, *;
}

<stmt> ::= if <cond> {
    backpatch(<cond>.true, 49); // 47: * -> 49
    L1 = <cond>.false; // [48]
    L2 = [];
} then <stmt1> else {
    L1 = [52];
    addQuad : jump, --, --, *;
    backpatch(<cond>.false, 53); // 48: * -> 53
} <stmt2> {
    L2 = <stmt2>.next; // []
    <stmt>.next = merge(L1, <stmt1>.next, L2); // 51
}


------------------------
------------------------

expr + expr : semv_expr * semv_expr -> semv_expr

expr > expr : semv_expr * semv_expr -> semv_cond

expr && expr : semv_cond * semv_cond -> semv_cond

cond_of_expr : semv_expr -> semv_cond
<cond> ::= <expr> {
    <cond>.true = [42];
    addQuad : ifb, <expr>.place, --, *;
    <cond>.false = [43];
    addQuad : jump, --, --, *;
}

expr_of_cond : semv_cond -> semv_expr
<expr> ::= <cond> {
    W = NEWTEMP (boolean);
    BACKPATCH(<cond>.TRUE, NEXTQUAD());
    GENQUAD(:=, true, --, W)
    Q = NEXTQUAD()+2;
    GENQUAD(jump, --, --, Q);
    BACKPATCH(<cond>.FALSE, NEXTQUAD());
    GENQUAD(:=, false, --, W);
    <expr>.PLACE = W
}
